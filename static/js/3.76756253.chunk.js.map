{"version":3,"sources":["components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css"],"names":["ProfileStatus","React","memo","props","useState","status","setStatus","editMode","setEditMode","useEffect","value","onChange","e","currentTarget","onBlur","updateProfileStatus","autoFocus","onDoubleClick","ProfileInfo","userProfile","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","fullName","photos","large","small","className","classes","profile","src","alt","facebook","github","instagram","mainLink","twitter","vk","website","youtube","Preloader","Post","console","log","post","photo","message","likesCount","MyPosts","postsElements","postsData","map","text","id","required","undefined","onSubmit","values","addPost","subscription","submitting","render","handleSubmit","form","event","a","reset","name","component","Textarea","placeholder","validate","error","touched","type","disabled","JSON","stringify","posts","MyPostsContainer","connect","state","profilePage","Profile","getProfile","getStatus","match","authenticationId","userId","params","history","push","PATH","LOGIN","profileContainer","compose","withRouter","userProfileData","auth","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","length","err","unsupportedIterableToArray","TypeError","module","exports"],"mappings":"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","file":"static/js/3.76756253.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype PropsType = {\n   status: string\n   updateProfileStatus: (status: string) => void\n}\n\nexport const ProfileStatus: React.FC<PropsType> = React.memo((props) => {\n   const [status, setStatus] = useState<string>(props.status);\n   let [editMode, setEditMode] = useState<boolean>(false);\n\n   useEffect(() => {\n      setStatus(props.status);\n   }, [props.status])\n\n   let onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value);\n\n   const activateEditMode = () => setEditMode(true);\n\n   const deactivateEditMode = () => {\n      setEditMode(false);\n      props.updateProfileStatus(status);\n   }\n\n   return (\n       <div> {editMode ?\n           <input value={status} onChange={onStatusChangeHandler} onBlur={deactivateEditMode} autoFocus/> :\n           <span onDoubleClick={activateEditMode}>Status: {status || '---------'} </span>}\n       </div>\n   );\n});","import React, {useEffect} from 'react';\nimport classes from './ProfileInfo.module.css';\nimport {UserProfileType} from '../../../redux/profile-reducer';\nimport {Preloader} from '../../../common/preloader/Preloader';\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus';\n\ntype PropsType = {\n    userProfile: UserProfileType | null,\n    getProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    status: string\n    updateProfileStatus: (status: string) => void\n    authenticationId: string\n}\n\n\nexport const ProfileInfo: React.FC<PropsType> = React.memo((props) => {\n    let {userProfile, status, updateProfileStatus} = props;\n\n    if (!userProfile) {\n        return <Preloader/>;\n    } else {\n\n        const {\n            aboutMe,\n            contacts,\n            lookingForAJob,\n            lookingForAJobDescription,\n            fullName,\n            photos: {small, large}\n        } = userProfile;\n\n        return (\n            <div className={classes.profile}>\n                <div>\n                    <img src={large ? large : ''} alt=\"ava\"/>\n                </div>\n                <ProfileStatus status={status} updateProfileStatus={updateProfileStatus}/>\n                <div>\n                    <span>About me: {aboutMe}</span>\n                </div>\n                <div className={classes.contacts}>\n                    Contacts:\n                    <div>\n                        <span>facebook: {contacts.facebook}</span><br/>\n                        <span>github: {contacts.github}</span><br/>\n                        <span>instagram: {contacts.instagram}</span><br/>\n                        <span>mainLink: {contacts.mainLink}</span><br/>\n                        <span>twitter: {contacts.twitter}</span><br/>\n                        <span>vk: {contacts.vk}</span><br/>\n                        <span>website: {contacts.website}</span><br/>\n                        <span>youtube: {contacts.youtube}</span><br/>\n                    </div>\n                </div>\n                <div>\n                    {lookingForAJob ? <span>I am looking a job</span> :\n                        <span>I am not looking a job</span>}\n                </div>\n                <div>\n                    <span>Description: {lookingForAJobDescription}</span>\n                </div>\n                <div>\n                    <span>Full name: {fullName}</span>\n                </div>\n            </div>\n        );\n    }\n}   );","import classes from './Post.module.css';\nimport React from 'react';\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nexport const Post:React.FC<PropsType> = React.memo((props) => {\n    console.log('Render Post')\n    return (\n        <div className={classes.post}>\n            <img src=\"https://encrypted-tbn0.gstatic.com/\n            images?q=tbn%3AANd9GcTvnViPfsS_1xh3mZLhMD7erA9qzqnKSamuSA&usqp=CAU\"\n                 alt=\"photo\" className={classes.photo}/>\n            {props.message}\n            <div>\n                <span>{`${props.likesCount} likes`}</span>\n            </div>\n        </div>\n    );\n});","import React from 'react';\nimport classes from './MyPosts.module.css';\nimport {Post} from './Post/Post';\nimport {PostType} from '../../../redux/profile-reducer';\nimport {Field, Form} from \"react-final-form\";\nimport {Textarea} from \"../../../common/form-component/FormControl/FormControl\";\n\ntype MyPostType = {\n    postsData: Array<PostType>\n    addPost: (text: string) => void\n}\ntype ValuesType = {\n    post: string\n}\n\nexport const MyPosts: React.FC<MyPostType> = React.memo((props) => {\n    console.log('Render MyPost')\n\n    const postsElements = props.postsData.map(post => <Post key={post.id}\n                                                            message={post.text}\n                                                            likesCount={post.likesCount}/>);\n\n    const required = (value: any) => value ? undefined : 'Required';\n    const showResults = (values: ValuesType) => {\n        props.addPost(values.post);\n    }\n\n    return (\n        <div>\n            <h3>My posts</h3>\n            <Form\n                onSubmit={showResults}\n                subscription={{\n                    submitting: true,\n                    values: true\n                }}\n                render={(props) => {\n                    const {handleSubmit, submitting, values, form} = props;\n\n                    return (\n                        <form onSubmit={async event => {\n                            await handleSubmit(event);\n                            form.reset();\n                        }}>\n                            <Field name='post'\n                                   component={Textarea}\n                                   placeholder='Enter your post here....'\n                                   validate={required}\n                                   subscription={{\n                                       value: true,\n                                       error: true,\n                                       touched: true\n                                   }}\n                            />\n                            <div>\n                                <button type='submit' disabled={submitting}>Add post</button>\n                            </div>\n                            <pre>{JSON.stringify(values, undefined, 2)}</pre>\n                        </form>\n                    )\n                }}\n            />\n            <div className={classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n});\n\n","import React from 'react';\nimport {addPost} from '../../../redux/profile-reducer';\nimport {MyPosts} from './MyPosts';\nimport {StateType} from '../../../redux/redux-store';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state: StateType) => ({\n   postsData: state.profilePage.posts\n});\n\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\n\n","import React, {useEffect} from 'react';\nimport classes from './Profile.module.css';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {UserProfileType} from '../../redux/profile-reducer';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {PATH} from \"../../App\";\n\ntype PathParamsType = {\n    userId: string,\n}\n\ntype OwnPropsType = {\n    userProfile: UserProfileType | null\n    getProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    status: string,\n    updateProfileStatus: (status: string) => void\n    authenticationId: string\n}\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\n\n\nexport const Profile: React.FC<PropsType> = React.memo((props) => {\n    const {userProfile, getProfile, getStatus, updateProfileStatus, status, match, authenticationId} = props;\n    let userId = match.params.userId;\n\n    if (!userId) {\n        userId = authenticationId;\n\n        if (!userId) {\n            props.history.push(PATH.LOGIN);\n        }\n    }\n\n    useEffect(() => {\n        getProfile(userId);\n        getStatus(userId);\n    }, [])\n\n    return (\n        <div className={classes.profileContainer}>\n            <ProfileInfo userProfile={userProfile}\n                         getProfile={getProfile}\n                         getStatus={getStatus}\n                         status={status}\n                         updateProfileStatus={updateProfileStatus}\n                         authenticationId={authenticationId}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n});\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Profile} from './Profile';\nimport {StateType} from '../../redux/redux-store';\nimport {getProfile, getStatus, updateProfileStatus} from '../../redux/profile-reducer';\nimport {withRouter} from 'react-router-dom';\nimport {compose} from 'redux';\n\nconst mapStateToProps = (state: StateType) => ({\n   userProfile: state.profilePage.userProfileData,\n   status: state.profilePage.status,\n   authenticationId: state.auth.id\n})\n\nexport default compose<React.ComponentType>(\n   withRouter,\n   connect(mapStateToProps, {getProfile, getStatus, updateProfileStatus})\n)(Profile);\n\n\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__3lONb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"ProfileInfo_profileContainer__1wuXi\",\"contacts\":\"ProfileInfo_contacts__3y62P\",\"profile\":\"ProfileInfo_profile__2LHtf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"photo\":\"Post_photo__2dXHf\"};"],"sourceRoot":""}