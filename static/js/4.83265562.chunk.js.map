{"version":3,"sources":["components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hocs/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css"],"names":["Dialog","React","memo","props","className","classes","dialog","to","id","activeClassName","active","name","Message","message","Dialogs","dialogs","messages","sendMessage","dialogsElements","map","messagesElements","dialogsItems","onSubmit","values","subscription","submitting","render","handleSubmit","form","event","a","reset","component","Textarea","placeholder","validate","required","value","error","touched","type","disabled","JSON","stringify","undefined","mapStateToProps","state","isAuth","auth","compose","WrappedComponent","connect","restProps","dialogsPage","module","exports"],"mappings":"yOAQaA,EAAgCC,IAAMC,MAAK,SAACC,GACrD,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SACI,cAAC,IAAD,CAASC,GAAE,mBAAcJ,EAAMK,IACtBC,gBAAiBJ,IAAQK,OADlC,SAEKP,EAAMQ,Y,iBCNVC,EAAkC,SAACT,GAC7C,OACG,qBAAKC,UAAWC,IAAQQ,QAAxB,SACIV,EAAMU,W,wBCgBHC,EAAiCb,IAAMC,MAAK,YAAuC,IAArCa,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YACtEC,EAAkBH,EAAQI,KAAI,SAAAb,GAAM,OAAI,cAACN,EAAD,CAAwBQ,GAAIF,EAAOE,GAAIG,KAAML,EAAOK,MAAvCL,EAAOE,OAC1DY,EAAmBJ,EAASG,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAA0BL,GAAIK,EAAQL,GACvBK,QAASA,EAAQA,SADlBA,EAAQL,OAOvE,OACI,sBAAKJ,UAAWC,IAAQU,QAAxB,UACI,qBAAKX,UAAWC,IAAQgB,aAAxB,SACKH,IAGL,sBAAKd,UAAWC,IAAQW,SAAxB,UACI,cAAC,IAAD,CACIM,SAZQ,SAACC,GACrBN,EAAYM,EAAOV,UAYPW,aAAc,CACVC,YAAY,GAEhBC,OAAQ,YAA+C,IAA7CC,EAA4C,EAA5CA,aAAcF,EAA8B,EAA9BA,WAAYF,EAAkB,EAAlBA,OAAQK,EAAU,EAAVA,KAExC,OACI,uBAAMN,SAAQ,uCAAG,WAAMO,GAAN,SAAAC,EAAA,sEACPH,EAAaE,GADN,OAEbD,EAAKG,QAFQ,2CAAH,sDAAd,UAII,cAAC,IAAD,CAAOpB,KAAK,UACLqB,UAAWC,IACXC,YAAY,yBACZC,SAAUC,IACVZ,aAAc,CACVa,OAAO,EACPC,OAAO,EACPC,SAAS,KAGpB,8BACI,wBAAQC,KAAK,SAASC,SAAUhB,EAAhC,oBAEJ,8BAAMiB,KAAKC,UAAUpB,OAAQqB,EAAW,WAKvDxB,W,6BC/DXyB,EAAkB,SAACC,GAAD,MAA4C,CACjEC,OAAQD,EAAME,KAAKD,S,YCGPE,uBDCR,SAA8BC,GAalC,OAAOC,YAAQN,EAARM,EAXP,SAA4BhD,GAA6B,IAC/C4C,EAAwB5C,EAAxB4C,OAAWK,EADmC,YACtBjD,EADsB,YAGrD,OAAK4C,EAIE,cAACG,EAAD,eAAsBE,IAHnB,cAAC,IAAD,CAAU7C,GAAI,gBCL3B4C,aAPqB,SAACL,GAAD,MAAuB,CAC5C/B,QAAS+B,EAAMO,YAAYtC,QAC3BC,SAAU8B,EAAMO,YAAYrC,YAKH,CAACC,kBAFdgC,CAGbnC,I,mBCfFwC,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,QAAU,2B,mBCAjFD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB","file":"static/js/4.83265562.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Dialog.module.css';\nimport {NavLink} from 'react-router-dom';\n\ntype DialogProps = {\n   id: number\n   name: string\n}\nexport const Dialog: React.FC<DialogProps> = React.memo((props) => {\n    return (\n        <div className={classes.dialog}>\n            <NavLink to={`/dialogs/${props.id}`}\n                     activeClassName={classes.active}>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n});","import React from 'react';\nimport classes from './Message.module.css';\n\ntype MessageTypes = {\n   id: number\n   message: string\n}\nexport const Message: React.FC<MessageTypes> = (props) => {\n   return (\n      <div className={classes.message}>\n         {props.message}\n      </div>\n   );\n}","import React, {ChangeEvent} from 'react';\nimport classes from './Dialogs.module.css';\nimport {Dialog} from './Dialog/Dialog';\nimport {Message} from './Message/Message';\nimport {Field, Form} from 'react-final-form';\nimport {Textarea} from \"../../common/form-component/FormControl/FormControl\";\nimport {required} from \"../../utils/validators\";\n\nexport type DialogType = {\n    id: number\n    name: string\n}\nexport type MessageType = {\n    id: number\n    message: string\n}\ntype DialogsType = {\n    sendMessage: (message: string) => void\n    dialogs: DialogType[]\n    messages: MessageType[]\n}\ntype ValuesType = {\n    message: string\n}\n\n\nexport const Dialogs: React.FC<DialogsType> = React.memo(({dialogs, messages, sendMessage}) => {\n    let dialogsElements = dialogs.map(dialog => <Dialog key={dialog.id} id={dialog.id} name={dialog.name}/>);\n    const messagesElements = messages.map(message => <Message key={message.id} id={message.id}\n                                                                    message={message.message}/>)\n\n    const onSubmitHandler = (values: ValuesType) => {\n        sendMessage(values.message);\n    }\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={classes.messages}>\n                <Form\n                    onSubmit={onSubmitHandler}\n                    subscription={{\n                        submitting: true\n                    }}\n                    render={({handleSubmit, submitting, values, form}) => {\n\n                        return (\n                            <form onSubmit={ async event => {\n                                await handleSubmit(event);\n                                form.reset();\n                            }}>\n                                <Field name='message'\n                                       component={Textarea}\n                                       placeholder='Enter your message....'\n                                       validate={required}\n                                       subscription={{\n                                           value: true,\n                                           error: true,\n                                           touched: true\n                                       }}\n                                />\n                                <div>\n                                    <button type='submit' disabled={submitting}>Send</button>\n                                </div>\n                                <pre>{JSON.stringify(values, undefined, 2)}</pre>\n                            </form>\n                        )\n                    }}\n                />\n                {messagesElements}\n            </div>\n        </div>\n    );\n});","import React, {ComponentType} from 'react';\nimport {connect} from 'react-redux';\nimport {StateType} from '../redux/redux-store';\nimport {Redirect} from 'react-router-dom';\n\ntype MapStateToPropsType = {\n   isAuth: boolean\n}\n\nconst mapStateToProps = (state: StateType): MapStateToPropsType => ({\n   isAuth: state.auth.isAuth\n});\n\n\nexport function withAuthRedirect <T>(WrappedComponent: ComponentType<T>) {\n\n   function RedirectComponent (props: MapStateToPropsType) {\n      const {isAuth, ...restProps} = props;\n\n      if (!isAuth) {\n         return <Redirect to={'/login'}/>\n      }\n\n      return <WrappedComponent {...restProps as T}/>\n   }\n\n\n   return connect(mapStateToProps)(RedirectComponent);\n}","import React, {ComponentType} from 'react';\nimport {sendMessage} from '../../redux/dialogs-reducer';\nimport {Dialogs} from './Dialogs';\nimport {connect} from 'react-redux';\nimport {StateType} from '../../redux/redux-store';\nimport {withAuthRedirect} from '../../hocs/withAuthRedirect';\nimport {compose} from 'redux';\n\nconst mapStateToProps = (state: StateType) => ({\n   dialogs: state.dialogsPage.dialogs,\n   messages: state.dialogsPage.messages\n});\n\nexport default compose<ComponentType>(\n   withAuthRedirect,\n   connect(mapStateToProps, {sendMessage})\n)(Dialogs);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Dialogs_profileContainer__2CYbz\",\"dialogs\":\"Dialogs_dialogs__2xRSA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1323i\",\"active\":\"Dialog_active__2fc4o\"};"],"sourceRoot":""}