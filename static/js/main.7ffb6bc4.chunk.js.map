{"version":3,"sources":["components/Navbar/Navbar.module.css","redux/auth-reducer.ts","utils/validators.ts","common/form-component/FormControl/FormControl.tsx","common/preloader/Preloader.tsx","components/Header/Header.module.css","components/Login/Login.module.css","components/Error404/Error404.module.css","common/form-component/FormControl/FormControl.module.css","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/users-reducer.ts","utils/objects-helper.ts","common/preloader/Preloader.module.css","api/api.ts","reportWebVitals.ts","components/Error404/Error404.tsx","components/Navbar/Navbar.tsx","logo.svg","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/redux-store.tsx","components/Login/Login.tsx","hocs/withSuspense.tsx","App.tsx","index.tsx"],"names":["module","exports","ActionsType","initialState","id","email","login","isFetching","isAuth","isSummaryError","errorMessage","captchaUrl","authReducer","state","action","type","SET_IS_FETCHING","SET_USER_DATA","SET_LOGIN_SUMMARY_ERROR","SET_CAPTCHA_URL","payload","setIsFetching","setUserData","setLoginSummaryError","getCaptchaUrlSuccess","auth","dispatch","a","authAPI","authMe","data","resultCode","password","rememberMe","captcha","getCaptchaUrl","messages","length","logout","securityAPI","url","required","value","undefined","maxLength","composeValidators","validators","reduce","error","validator","FormControl","props","input","meta","children","useDispatch","useSelector","useEffect","hasError","touched","className","classes","TextInput","rest","Textarea","Preloader","ldsRing","ACTIONS_TYPE","posts","text","likesCount","userProfileData","status","isUpdateProfileSuccess","profileReducer","ADD_POST","newPost","SET_USER_PROFILE","SET_PROFILE_STATUS","UPDATE_PROFILE_SUCCESS","SET_ERROR","addPost","setProfileStatus","setUpdateProfileSuccess","setProfileError","getProfile","userId","profileAPI","getUserProfile","userData","getStatus","getProfileStatus","updateProfileStatus","savePhoto","photo","updatePhoto","photos","SAVE_PHOTO_SUCCESS","updateProfile","domainModel","getState","toString","profile","profilePage","domainModelWithoutContacts","contacts","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","facebook","github","instagram","mainLink","twitter","vk","website","youtube","then","dialogs","name","message","dialogsReducer","SEND_MESSAGE","newMessage","newMessageText","sendMessage","updateObjectInArray","items","objProp","itemId","newObjectProps","map","item","key","obj","users","totalCount","pageSize","page","followingInProgress","usersReducer","FOLLOW","followed","UNFOLLOW","SET_USERS","SET_TOTAL_COUNT","SET_CURRENT_PAGE","SET_FOLLOWING_IN_PROGRESS","arrayUsersId","filter","usersId","followSuccess","unfollowSuccess","setPage","setFollowingInProgress","requestUsers","currentPage","usersAPI","getUsers","followUnfollowFlow","apiMethod","actionCreator","follow","followAPI","unFollow","instance","axios","create","withCredentials","baseURL","headers","get","response","put","formData","FormData","append","post","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Error404","s","verticalCenter","container","to","React","memo","Navbar","navbar","navbarItem","activeClassName","active","link","href","Header","history","useHistory","header","logoBlock","src","logo","alt","loginBlock","onClick","push","HeaderContainer","this","Component","connector","connect","compose","isInitializedApp","rootReducer","combineReducers","dialogsPage","usersPage","sidebar","app","INITIALIZED_APP","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","Login","onSubmitFormHandler","values","onSubmit","subscription","submitting","render","handleSubmit","form","event","component","placeholder","validate","disabled","formSummaryError","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","UsersContainer","SuspendedDialogs","SuspendedProfile","SuspendedUsers","App","caughtAllUncaughtErrors","e","filename","lineno","colno","console","log","promise","Promise","all","addEventListener","removeEventListener","path","exact","StrictMode","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7ffb6bc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__CLYHD\",\"navbarItem\":\"Navbar_navbarItem__1xOtf\",\"link\":\"Navbar_link__TNvz9\",\"active\":\"Navbar_active__3mbhk\"};","import {authAPI, securityAPI} from '../api/api';\nimport {Dispatch} from \"redux\";\nimport {StateType, AppActionType} from './redux-store';\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\n\nenum ActionsType {\n    SET_IS_FETCHING = 'AUTH/SET_IS_FETCHING',\n    SET_USER_DATA = 'AUTH/SET_USER_DATA',\n    SET_LOGIN_SUMMARY_ERROR = 'AUTH/SET_LOGIN_SUMMARY_ERROR',\n    SET_CAPTCHA_URL = 'AUTH/SET_CAPTCHA_URL',\n}\n\nconst initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isFetching: false as boolean,\n    isAuth: false as boolean,\n    isSummaryError: false as boolean,\n    errorMessage: '',\n    captchaUrl: null as string | null\n}\n\n\nexport default function authReducer(state = initialState, action: ActionsAuthReducersTypes): InitialStateType {\n    switch (action.type) {\n        case ActionsType.SET_IS_FETCHING: {\n            return {...state, ...action.payload}\n        }\n        case ActionsType.SET_USER_DATA: {\n            return {...state, ...action.payload}\n        }\n        case ActionsType.SET_LOGIN_SUMMARY_ERROR: {\n            return {...state, ...action.payload}\n        }\n        case ActionsType.SET_CAPTCHA_URL: {\n            return {...state, ...action.payload}\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n// actions\nexport const setIsFetching = (isFetching: boolean) => ({\n    type: ActionsType.SET_IS_FETCHING,\n    payload: {isFetching}\n}) as const;\n\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: ActionsType.SET_USER_DATA,\n    payload: {id, email, login, isAuth}\n}) as const;\n\nexport const setLoginSummaryError = (isSummaryError: boolean, errorMessage: string) => ({\n    type: ActionsType.SET_LOGIN_SUMMARY_ERROR,\n    payload: {isSummaryError, errorMessage}\n}) as const;\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) => ({\n    type: ActionsType.SET_CAPTCHA_URL,\n    payload: {captchaUrl}\n}) as const;\n\n\n// thunks\nexport const auth = () => async (dispatch: Dispatch<ActionsAuthReducersTypes>) => {\n    const data = await authAPI.authMe()\n\n    let {id, email, login} = data.data;\n\n    if (data.resultCode === 0) {\n        dispatch(setUserData(id, email, login, true));\n    }\n}\n\nexport const login = (login: string, password: string, rememberMe: boolean, captcha?: string): ThunkAction<void, StateType, unknown, AppActionType> =>\n    async (dispatch: ThunkDispatch<StateType, unknown, AppActionType>) => {\n        try {\n            dispatch(setIsFetching(true));\n            const data = await authAPI.login(login, password, rememberMe, captcha);\n\n            if (data.resultCode === 0) {\n                dispatch(auth());\n            } else {\n                if (data.resultCode === 10){\n                    dispatch(getCaptchaUrl());\n                }\n\n                if (data.messages.length > 0) {\n                    dispatch(setLoginSummaryError(true, data.messages[0]));\n                }\n            }\n        } finally {\n            dispatch(setIsFetching(false));\n        }\n    }\n\nexport const logout = () => async (dispatch: Dispatch) => {\n    const data = await authAPI.logout()\n\n    if (data.resultCode === 0) {\n        dispatch(setUserData(null, null, null, false));\n        dispatch(getCaptchaUrlSuccess(null));\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch: Dispatch<ActionsAuthReducersTypes>) => {\n    const data = await securityAPI.getCaptchaUrl();\n\n    dispatch(getCaptchaUrlSuccess(data.url));\n}\n\n\n// types\nexport type InitialStateType = typeof initialState;\n\nexport type ActionsAuthReducersTypes =\n    | ReturnType<typeof setIsFetching>\n    | ReturnType<typeof setUserData>\n    | ReturnType<typeof setLoginSummaryError>\n    | ReturnType<typeof getCaptchaUrlSuccess>;","export const required = (value: any) => value ? undefined : 'Required';\n\nexport const maxLength = (maxLength: number) => (value: any) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n\nexport const composeValidators = (...validators: any) => (value: any) =>\n    validators.reduce((error: any, validator: any) => error || validator(value), undefined);","import React, {useEffect} from \"react\";\nimport classes from './FormControl.module.css';\n\nimport { FieldRenderProps } from \"react-final-form\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {StateType} from \"../../../redux/redux-store\";\nimport {setLoginSummaryError} from \"../../../redux/auth-reducer\";\n\ntype Props = FieldRenderProps<string, any>;\n\nconst FormControl = (props: Props) => {\n    const {input, meta, children} = props;\n\n    const dispatch = useDispatch();\n\n    const isSummaryError = useSelector<StateType, boolean>(state => state.auth.isSummaryError);\n\n    useEffect(() => {\n        if (isSummaryError && input.value.length) {\n            dispatch(setLoginSummaryError(false, ''));\n        }\n    }, [input.value])\n\n    const hasError = meta.error && meta.touched;\n\n    return (\n        <div className={`${hasError ? classes.error : ''}`}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span className={classes.error}>{meta.error}</span>}\n        </div>\n    );\n}\n\nexport const TextInput: React.FC<Props> = (props: Props) => {\n    const { input, meta, ...rest } = props;\n\n    return (\n        <FormControl {...props}>\n            <input type=\"text\" {...input} {...rest} />\n        </FormControl>\n    );\n};\n\nexport const Textarea: React.FC<Props> = (props: Props) => {\n    const { input, meta, ...rest } = props;\n\n    return (\n        <FormControl {...props}>\n            <textarea {...input} {...rest} />\n        </FormControl>\n    );\n};\n\n","import React from 'react';\nimport classes from './Preloader.module.css';\n\ntype PropsType = {}\n\nexport const Preloader: React.FC<PropsType> = (props) => {\n   return (\n      <>\n         <div className={classes.ldsRing}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n         </div>\n      </>\n   );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"logoBlock\":\"Header_logoBlock__1MAEm\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1Oz4Y\",\"form\":\"Login_form__2mvFD\",\"formSummaryError\":\"Login_formSummaryError__3cy0x\",\"circle\":\"Login_circle__dFoo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"verticalCenter\":\"Error404_verticalCenter__1rCbI\",\"container\":\"Error404_container__R9zVq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControl_error__1aaWY\"};","import {PhotosDataType, profileAPI} from '../api/api';\nimport {Dispatch} from \"redux\";\nimport {AppActionType, StateType} from \"./redux-store\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\n\nenum ACTIONS_TYPE {\n    ADD_POST = 'PROFILE/ADD-POST-PROFILE-PAGE',\n    SET_USER_PROFILE = 'PROFILE/SET_USER_PROFILE',\n    SET_PROFILE_STATUS = 'PROFILE/SET_PROFILE_STATUS',\n    SAVE_PHOTO_SUCCESS = 'PROFILE/SAVE_PHOTO_SUCCESS',\n    UPDATE_PROFILE_SUCCESS = 'PROFILE/UPDATE_PROFILE_SUCCESS',\n    SET_ERROR = 'PROFILE/SET_ERROR',\n}\n\nexport const initialState = {\n    posts: [\n        {id: 1, text: 'I love Ukraine.', likesCount: 10},\n        {id: 2, text: 'Lorem ipsum is big dog cat dolor sit.', likesCount: 3},\n    ] as Array<PostType>,\n    userProfileData: null as UserProfileType | null,\n    status: null as string | null,\n    isUpdateProfileSuccess: false as boolean,\n    error: null as string | null,\n}\n\n\nexport default function profileReducer(state: ProfileReducerInitialStateType = initialState, action: ActionsProfileType): ProfileReducerInitialStateType {\n    switch (action.type) {\n        case ACTIONS_TYPE.ADD_POST: {\n            const newPost = {id: 3, likesCount: 4, ...action.payload};\n\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case ACTIONS_TYPE.SET_USER_PROFILE: {\n            return {...state, userProfileData: action.payload}\n        }\n        case ACTIONS_TYPE.SET_PROFILE_STATUS: {\n            return {...state, ...action.payload}\n        }\n        case ACTIONS_TYPE.UPDATE_PROFILE_SUCCESS: {\n            return {...state, ...action.payload}\n        }\n        case ACTIONS_TYPE.SET_ERROR: {\n            return {...state, ...action.payload}\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n// actions\nexport const addPost = (text: string) => ({type: ACTIONS_TYPE.ADD_POST, payload: {text}}) as const\n\nexport const setUserProfileData = (userData: UserProfileType) =>\n    ({type: ACTIONS_TYPE.SET_USER_PROFILE, payload: {...userData}}) as const\n\nexport const setProfileStatus = (status: string) =>\n    ({type: ACTIONS_TYPE.SET_PROFILE_STATUS, payload: {status}}) as const\n\nexport const savePhotoSuccess = (photos: PhotosDataType) =>\n    ({type: ACTIONS_TYPE.SAVE_PHOTO_SUCCESS, payload: {...photos}} as const);\n\nexport const setUpdateProfileSuccess = (isUpdateProfileSuccess: boolean) => ({\n    type: ACTIONS_TYPE.UPDATE_PROFILE_SUCCESS,\n    payload: {isUpdateProfileSuccess}\n} as const);\n\nexport const setProfileError = (error: null | string) =>\n    ({type: ACTIONS_TYPE.SET_ERROR, payload: {error}} as const);\n\n\n// thunks\nexport const getProfile = (userId: string) => async (dispatch: Dispatch<ActionsProfileType>) => {\n    const data = await profileAPI.getUserProfile(userId);\n\n    dispatch(setUserProfileData(data));\n}\n\nexport const getStatus = (userId: string) => async (dispatch: Dispatch<ActionsProfileType>) => {\n    const data = await profileAPI.getProfileStatus(userId);\n\n    dispatch(setProfileStatus(data.data));\n}\n\nexport const updateProfileStatus = (status: string) => async (dispatch: Dispatch<ActionsProfileType>) => {\n    const data = await profileAPI.updateProfileStatus(status)\n\n    if (data.resultCode === 0) {\n        dispatch(setProfileStatus(status));\n    }\n}\n\nexport const savePhoto = (photo: File) => async (dispatch: Dispatch<ActionsProfileType>) => {\n\n    const data = await profileAPI.updatePhoto(photo);\n\n    if (data.resultCode === 0) {\n        dispatch(savePhotoSuccess(data.data));\n        dispatch(setUpdateProfileSuccess(true));\n    }\n};\n\nexport const updateProfile = (domainModel: UpdateDomainProfileModelType): ThunkAction<void, StateType, unknown, ActionsProfileType> =>\n\n    (dispatch: ThunkDispatch<StateType, unknown, ActionsProfileType>, getState: () => StateType) => {\n        const userId = getState().auth.id?.toString();\n        const profile = getState().profilePage.userProfileData;\n        const {contacts, ...domainModelWithoutContacts} = domainModel;\n\n        let data = null;\n\n        if (profile) {\n            profileAPI.updateProfile({\n                userId: profile.userId,\n                aboutMe: profile.aboutMe,\n                fullName: profile.fullName,\n                lookingForAJob: profile.lookingForAJob,\n                lookingForAJobDescription: profile.lookingForAJobDescription,\n                contacts: {\n                    facebook: profile.contacts.facebook,\n                    github: profile.contacts.github,\n                    instagram: profile.contacts.instagram,\n                    mainLink: profile.contacts.mainLink,\n                    twitter: profile.contacts.twitter,\n                    vk: profile.contacts.vk,\n                    website: profile.contacts.website,\n                    youtube: profile.contacts.youtube,\n                    ...domainModel.contacts\n                },\n                ...domainModelWithoutContacts\n            })\n                .then((data) => {\n                    if (data.resultCode === 0) {\n                        if (userId) {\n                            dispatch(getProfile(userId));\n                        }\n                        dispatch(setUpdateProfileSuccess(true));\n                    } else {\n                        if (data.messages.length) {\n                            dispatch(setProfileError(data.messages[0]));\n                        } else {\n                            dispatch(setProfileError('Some error occurred'));\n                        }\n                    }\n                })\n        }\n    };\n\n\n// types\nexport type UpdateDomainProfileModelType = {\n    \"lookingForAJob\"?: boolean,\n    \"lookingForAJobDescription\"?: string | null\n    \"fullName\"?: string,\n    \"aboutMe\"?: string | null\n    \"contacts\": {\n        \"facebook\"?: string | null\n        \"website\"?: string | null\n        \"vk\"?: string | null\n        \"twitter\"?: string | null\n        \"instagram\"?: string | null\n        \"youtube\"?: string | null\n        \"github\"?: string | null\n        \"mainLink\"?: string | null\n    }\n}\nexport type PostType = {\n    id: number\n    text: string\n    likesCount: number\n}\ntype PhotosUserType = {\n    small: string | null\n    large: string | null\n}\ntype UserContactsType = {\n    facebook: string | null\n    website: string | null\n    vk: string | null\n    twitter: string | null\n    instagram: string | null\n    youtube: string | null\n    github: string | null\n    mainLink: string | null\n}\nexport type UserProfileType = {\n    aboutMe: string | null,\n    contacts: UserContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: string | null\n    fullName: string | null\n    userId: number\n    photos: PhotosUserType\n}\n\nexport type ProfileReducerInitialStateType = typeof initialState;\n\nexport type ActionsProfileType =\n    | ReturnType<typeof addPost>\n    | ReturnType<typeof setUserProfileData>\n    | ReturnType<typeof setProfileStatus>\n    | ReturnType<typeof savePhotoSuccess>\n    | ReturnType<typeof setUpdateProfileSuccess>\n    | ReturnType<typeof setProfileError>;\n","import {DialogType, MessageType} from '../components/Dialogs/Dialogs';\n\nenum  ACTIONS_TYPE {\n   SEND_MESSAGE = 'SEND-MESSAGE-DIALOGS-PAGE',\n}\n\nconst initialState = {\n   dialogs: [\n      {id: 1, name: 'Andriy'},\n      {id: 2, name: 'Serhiy'},\n      {id: 3, name: 'Oleg'},\n      {id: 4, name: 'Lesya'},\n      {id: 5, name: 'Ira'},\n   ] as DialogType[],\n   messages: [\n      {id: 1, message: 'Lorem ipsum dolor sit.'},\n      {id: 2, message: 'Lorem ipsum is big dog cat dolor sit.'},\n      {id: 3, message: 'Lorem ipsum mouse cat house dolor sit.'},\n   ] as MessageType[],\n}\n\n\nexport default function dialogsReducer(state: InitialStateType = initialState, action: ActionsDialogsType) {\n   switch (action.type) {\n      case ACTIONS_TYPE.SEND_MESSAGE: {\n         const newMessage = {id: 4, ...action.payload};\n\n         return {\n            ...state,\n            messages: [...state.messages, newMessage],\n            newMessageText: '',\n         };\n      }\n      default: {\n         return state;\n      }\n   }\n}\n\n\n// actions\nexport const sendMessage = (message: string) => ({type: ACTIONS_TYPE.SEND_MESSAGE, payload: {message}}) as const\n\n\n// types\ntype InitialStateType = typeof initialState;\n\nexport type ActionsDialogsType = ReturnType<typeof sendMessage>;","import {followAPI, usersAPI, UserType} from '../api/api';\nimport {Dispatch} from 'react';\nimport {updateObjectInArray} from \"../utils/objects-helper\";\n\nenum ACTIONS_TYPE {\n    FOLLOW = 'FOLLOW-USERS-REDUCER',\n    UNFOLLOW = 'UNFOLLOW-USERS-REDUCER',\n    SET_USERS = 'SET-USERS-USERS-REDUCER',\n    SET_TOTAL_COUNT = 'SET_TOTAL_COUNT_USERS_REDUCER',\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE_USERS_REDUCER',\n    SET_IS_FETCHING = 'USERS/SET_SET_IS_FETCHING',\n    SET_FOLLOWING_IN_PROGRESS = 'USERS/SET_FOLLOWING_IN_PROGRESS',\n}\n\nconst initialState = {\n    users: [] as UserType[],\n    totalCount: 0 as number,\n    pageSize: 5 as number,\n    page: 1 as number,\n    isFetching: false as boolean,\n    followingInProgress: [] as Array<number>,\n}\n\n\nexport const usersReducer = (state = initialState, action: ActionsUsersReducersTypes): UsersInitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.FOLLOW: {\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, 'id', action.userId, {followed: true})\n            }\n        }\n        case ACTIONS_TYPE.UNFOLLOW: {\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, 'id', action.userId, {followed: false})\n            }\n        }\n        case ACTIONS_TYPE.SET_USERS: {\n            return {...state, users: action.users}\n        }\n        case ACTIONS_TYPE.SET_TOTAL_COUNT: {\n            return {...state, ...action.payload}\n        }\n        case ACTIONS_TYPE.SET_CURRENT_PAGE: {\n            return {...state, ...action.payload}\n        }\n        case ACTIONS_TYPE.SET_IS_FETCHING: {\n            return {...state, ...action.payload}\n        }\n        case ACTIONS_TYPE.SET_FOLLOWING_IN_PROGRESS: {\n            let id = action.payload.id;\n            let arrayUsersId = state.followingInProgress;\n\n            return {\n                ...state,\n                followingInProgress: action.payload.isFetching ?\n                    [...arrayUsersId, id] :\n                    arrayUsersId.filter(usersId => usersId !== id)\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n// actions\nexport const followSuccess = (userId: number) =>\n    ({type: ACTIONS_TYPE.FOLLOW, userId}) as const;\n\nexport const unfollowSuccess = (userId: number) =>\n    ({type: ACTIONS_TYPE.UNFOLLOW, userId}) as const;\n\nexport const setUsers = (users: Array<UserType>) =>\n    ({type: ACTIONS_TYPE.SET_USERS, users}) as const;\n\nexport const setTotalCount = (totalCount: number) =>\n    ({type: ACTIONS_TYPE.SET_TOTAL_COUNT, payload: {totalCount}}) as const;\n\nexport const setPage = (page: number) =>\n    ({type: ACTIONS_TYPE.SET_CURRENT_PAGE, payload: {page}}) as const;\n\nexport const setIsFetching = (isFetching: boolean) =>\n    ({type: ACTIONS_TYPE.SET_IS_FETCHING, payload: {isFetching}}) as const;\n\nexport const setFollowingInProgress = (isFetching: boolean, id: number) =>\n    ({type: ACTIONS_TYPE.SET_FOLLOWING_IN_PROGRESS, payload: {id, isFetching}}) as const;\n\n\n// thunks\nexport const requestUsers = (currentPage: number, pageSize: number) => async (dispatch: Dispatch<ActionsUsersReducersTypes>) => {\n    dispatch(setIsFetching(true));\n\n    const data = await usersAPI.getUsers(currentPage, pageSize);\n\n    dispatch(setUsers(data.items));\n    dispatch(setTotalCount(data.totalCount));\n    dispatch(setIsFetching(false));\n\n}\n\nconst followUnfollowFlow =  async (\n    dispatch: Dispatch<ActionsUsersReducersTypes>,\n    apiMethod: any,\n    actionCreator: any,\n    userId: number\n) => {\n    dispatch(setFollowingInProgress(true, userId));\n\n    const data = await apiMethod;\n\n    if (data.resultCode === 0) {\n        dispatch(actionCreator);\n\n        dispatch(setFollowingInProgress(false, userId));\n    }\n}\n\nexport const follow = (userId: number) => async (dispatch: Dispatch<ActionsUsersReducersTypes>) => {\n    followUnfollowFlow(dispatch, followAPI.follow(userId), followSuccess(userId), userId);\n}\n\nexport const unFollow = (userId: number) => async (dispatch: Dispatch<ActionsUsersReducersTypes>) => {\n    followUnfollowFlow(dispatch, followAPI.unFollow(userId), unfollowSuccess(userId), userId);\n}\n\n\n// types\nexport type UsersInitialStateType = typeof initialState;\n\nexport type ActionsUsersReducersTypes =\n    ReturnType<typeof followSuccess> | ReturnType<typeof unfollowSuccess> | ReturnType<typeof setUsers> |\n    ReturnType<typeof setTotalCount> | ReturnType<typeof setPage> | ReturnType<typeof setIsFetching> |\n    ReturnType<typeof setFollowingInProgress>;\n","import {UserType} from \"../api/api\";\n\nconst getKeyValue = <T extends object, U extends keyof T>(key: U) => (obj: T) =>\n    obj[key];\n\ntype ObjectType = UserType;\n\ntype ObjPropType = keyof ObjectType;\n\nexport const updateObjectInArray = (items: ObjectType[], objProp: ObjPropType, itemId: any, newObjectProps: Object) => {\n    return items.map(item => {\n            const value = getKeyValue<ObjectType, keyof ObjectType>(objProp)(item);\n\n            return value === itemId ?\n                {...item, ...newObjectProps} :\n                item\n        }\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"Preloader_ldsRing__2l6ec\"};","import axios from 'axios';\n\nconst instance = axios.create({\n   withCredentials: true,\n   baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n   headers: {\n      'API-KEY': '89e8e364-2267-45f8-866b-f315992878e1'\n   }\n});\n\n\nexport const profileAPI = {\n   getUserProfile(userId: string) {\n      return instance.get<ResponseUserProfileType>(`profile/${userId}`)\n         .then(response => response.data);\n   },\n   getProfileStatus(userId: string) {\n      return instance.get<string>(`profile/status/${userId}`)\n   },\n   updateProfileStatus(status: string) {\n      return instance.put<ResponseBaseType>(`profile/status`, {status})\n         .then(response => response.data);\n   },\n   updatePhoto (photo: File) {\n      const formData = new FormData();\n\n      formData.append('image', photo);\n\n      return instance.put<ResponseBaseType<PhotosDataType>>('profile/photo', formData, {\n         headers: {\n            'Content-Type': 'multipart/form-data'\n         }\n      })\n          .then(response => response.data)\n   },\n   updateProfile(profile: UpdateApiProfileModelType) {\n      return instance.put<ResponseBaseType>('profile', profile)\n          .then(response => response.data);\n   }\n}\n\nexport const usersAPI = {\n   getUsers(currentPage: number, pageSize: number) {\n      return instance.get<ResponseGetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\n         .then(response => response.data)\n   }\n}\n\nexport const followAPI = {\n   follow(userId: number) {\n      return instance.post<ResponseBaseType>(`follow/${userId}`)\n         .then(response => response.data);\n   },\n   unFollow(userId: number) {\n      return instance.delete<ResponseBaseType>(`follow/${userId}`)\n         .then(response => response.data);\n   }\n}\n\nexport const authAPI = {\n   authMe() {\n      return  instance.get<ResponseBaseType<{\"id\": number, \"login\": string, \"email\": string}>>('auth/me')\n         .then(response => response.data);\n   },\n   login(email: string, password: string, rememberMe: boolean, captcha?: string) {\n      return instance.post<ResponseBaseType<{\"userId\": number}>>('auth/login', {email, password, rememberMe, captcha})\n          .then(response => response.data);\n   },\n   logout() {\n      return instance.delete<ResponseBaseType>('auth/login')\n          .then(response => response.data);\n   }\n}\n\nexport const securityAPI = {\n   getCaptchaUrl() {\n      return  instance.get<ResponseGetCaptchaUrlType>('security/get-captcha-url')\n          .then(response => response.data);\n   },\n}\n\n\n// types\ntype ResponseGetCaptchaUrlType = {url: string}\n\ntype ResponseBaseType<D= {}> = {\n   \"data\": D,\n   \"messages\": string[],\n   \"fieldsErrors\": string[],\n   \"resultCode\": number\n}\n\nexport type UpdateApiProfileModelType = {\n   \"userId\": number,\n   \"lookingForAJob\": boolean,\n   \"lookingForAJobDescription\": string | null\n   \"fullName\": string | null,\n   \"aboutMe\": string | null\n   \"contacts\": {\n      \"facebook\": string | null\n      \"website\": string | null\n      \"vk\": string | null\n      \"twitter\": string | null\n      \"instagram\": string | null\n      \"youtube\": string | null\n      \"github\": string | null\n      \"mainLink\": string | null\n   }\n}\n\ntype ResponseUserProfileType = {\n   \"aboutMe\": string | null\n   \"contacts\": {\n      \"facebook\": string | null\n      \"website\": string | null\n      \"vk\": string | null\n      \"twitter\": string | null\n      \"instagram\": string | null\n      \"youtube\": string | null\n      \"github\": string | null\n      \"mainLink\": string | null\n   },\n   \"lookingForAJob\": boolean,\n   \"lookingForAJobDescription\": string | null\n   \"fullName\": string,\n   \"userId\": number,\n   \"photos\": {\n      \"small\": string | null\n      \"large\": string | null\n   }\n}\n\nexport type PhotosDataType = {\n   small: string\n   large: string\n};\n\nexport type UserType = {\n   \"name\": string,\n   \"id\": number,\n   \"uniqueUrlName\": string | null,\n   \"photos\": {\n      \"small\": string | null,\n      \"large\": string | null\n   },\n   \"status\": string | null,\n   \"followed\": boolean\n}\n\ntype ResponseGetUsersType = {\n   items: UserType[],\n   totalCount: number,\n   error: string | null\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport s from './Error404.module.css';\nimport {Link} from \"react-router-dom\";\n\nfunction Error404() {\n   return (\n      <div className={s.verticalCenter}>\n         <div className={s.container}>\n            <h1>😮</h1>\n            <h2>Oops! Page Not Be Found</h2>\n            <p>Sorry but the page you are looking for does not exist.</p>\n            <Link to={'/profile'}>Back to homepage</Link>\n         </div>\n      </div>\n   );\n}\n\nexport default React.memo(Error404);","import React from 'react';\nimport classes from './Navbar.module.css';\nimport {NavLink} from 'react-router-dom';\n\nexport const Navbar = () => {\n    return (\n        <nav className={classes.navbar}>\n            <div className={classes.navbarItem}>\n               <NavLink to={'/profile'}\n                        activeClassName={classes.active}\n                        className={classes.link}>\n                  Profile\n               </NavLink>\n            </div>\n            <div className={classes.navbarItem}>\n               <NavLink to={'/dialogs'}\n                        activeClassName={classes.active}\n                        className={classes.link}>\n                  Messages\n               </NavLink>\n            </div>\n           <div className={classes.navbarItem}>\n              <NavLink to={'/users'}\n                       activeClassName={classes.active}\n                       className={classes.link}>\n                 Users\n              </NavLink>\n           </div>\n            <div className={classes.navbarItem}>\n                <a href=\"#\" className={classes.link}>News</a>\n            </div>\n            <div className={classes.navbarItem}>\n                <a href=\"#\" className={classes.link}>Music</a>\n            </div>\n        </nav>\n    );\n}","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport logo from './../../logo.svg'\nimport classes from './Header.module.css';\nimport {NavLink, useHistory} from 'react-router-dom';\nimport {setUserData} from \"../../redux/auth-reducer\";\n\ntype PropsType = {\n    login: string | null\n    isAuth: boolean\n    logout: () => void\n    setUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => void\n}\n\n\nexport const Header: React.FC<PropsType> = (props) => {\n    const {isAuth, login, logout, setUserData} = props;\n    const history = useHistory();\n\n    const logoutHandler = () => {\n        logout();\n        setUserData(null, null, null, false);\n        history.push('/login');\n    };\n\n    return (\n        <header className={classes.header}>\n            <div className={classes.logoBlock}>\n                <img src={logo}\n                     alt=\"logo\"/>\n            </div>\n\n            <div className={classes.loginBlock}>\n                {isAuth ? <>{login} / <span onClick={logoutHandler}>logout</span></> :\n                    <NavLink to={'/login'}>login</NavLink>}\n            </div>\n        </header>\n    );\n}\n","import React from 'react';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {StateType} from '../../redux/redux-store';\nimport {Header} from './Header';\nimport {auth, logout, setUserData} from '../../redux/auth-reducer';\nimport {compose} from 'redux';\n\nclass HeaderContainer extends React.Component<TProps> {\n   constructor(props: TProps) {\n      super(props);\n   }\n\n   render() {\n      return <Header {...this.props}  />\n   }\n}\n\ntype MapStateType = {\n   isAuth: boolean\n   login: string | null\n}\n\nconst mapStateToProps = (state: StateType): MapStateType => ({\n   login: state.auth.login,\n   isAuth: state.auth.isAuth\n});\n\nconst connector = connect(mapStateToProps, {auth, logout, setUserData});\n\ntype TProps = ConnectedProps<typeof connector>;\n\nexport default compose<React.ComponentType>(\n    connector\n)(HeaderContainer);\n\n\n\n","\nconst initialState = {}\n\nexport function sidebarReducer(state: any = initialState, action: any) {\n   switch (action.type) {\n      default: {\n         return state;\n      }\n   }\n}","import {AppActionType, StateType} from './redux-store';\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\nimport {auth} from \"./auth-reducer\";\n\nenum ActionsType {\n    INITIALIZED_APP = 'APP/INITIALIZED_APP',\n}\n\nconst initialState = {\n    isInitializedApp: false as boolean\n}\n\n\nexport default function appReducer(state = initialState, action: ActionsAppReducersTypes): AppInitialStateType {\n    switch (action.type) {\n        case ActionsType.INITIALIZED_APP: {\n            return {...state, isInitializedApp: true}\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n// actions\nconst initializedSuccess = () => ({\n    type: ActionsType.INITIALIZED_APP\n}) as const;\n\n\n// thunks\nexport const initialize = (): ThunkAction<void, StateType, unknown, AppActionType> =>\n    async (dispatch: ThunkDispatch<StateType, unknown, AppActionType>) => {\n        const promise = dispatch(auth());\n\n        await Promise.all([promise]);\n\n        dispatch(initializedSuccess())\n    }\n\n\n// types\nexport type AppInitialStateType = typeof initialState;\nexport type ActionsAppReducersTypes = ReturnType<typeof initializedSuccess>;","import dialogsReducer, {ActionsDialogsType} from './dialogs-reducer';\nimport profileReducer, {ActionsProfileType} from './profile-reducer';\nimport {sidebarReducer} from './sidebar-reducer';\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux'\nimport thunk from 'redux-thunk';\nimport {ActionsUsersReducersTypes, usersReducer} from './users-reducer';\nimport authReducer, {ActionsAuthReducersTypes} from './auth-reducer';\nimport appReducer, {ActionsAppReducersTypes} from \"./app-reducer\";\n\nlet rootReducer = combineReducers({\n   profilePage: profileReducer,\n   dialogsPage: dialogsReducer,\n   usersPage: usersReducer,\n   sidebar: sidebarReducer,\n   auth: authReducer,\n   app: appReducer,\n});\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n// @ts-ignore\nwindow.store = store;\n\nexport type StateType = ReturnType<typeof rootReducer>\n\nexport type AppActionType = ActionsAuthReducersTypes  | ActionsUsersReducersTypes | ActionsDialogsType |\n    ActionsProfileType | ActionsAppReducersTypes;\n\n\n","import React from 'react';\nimport classes from './Login.module.css';\nimport {Field, Form} from 'react-final-form';\nimport {composeValidators, maxLength, required} from \"../../utils/validators\";\nimport {TextInput} from \"../../common/form-component/FormControl/FormControl\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {StateType} from \"../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\n\ntype PropsType = {}\n\ntype FormDataType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n    captcha: string\n}\n\n\nexport const Login: React.FC<PropsType> = React.memo((props) => {\n    const dispatch = useDispatch();\n    const isAuth = useSelector<StateType, boolean>(state => state.auth.isAuth);\n    const isSummaryError = useSelector<StateType, boolean>(state => state.auth.isSummaryError);\n    const errorMessage = useSelector<StateType, string>(state => state.auth.errorMessage);\n    const captchaUrl = useSelector<StateType, string | null>(state => state.auth.captchaUrl);\n    const isFetching = useSelector<StateType, boolean>(state => state.auth.isFetching);\n\n    const onSubmitFormHandler = async (values: FormDataType) => {\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={classes.container}>\n            <h3>Login Form</h3>\n\n            <Form\n                onSubmit={onSubmitFormHandler}\n                subscription={{\n                    submitting: true\n                }}\n                render={(props) => {\n                    const {handleSubmit, submitting, form} = props;\n\n                    return (\n                        <form onSubmit={async (event) => {\n                            await handleSubmit(event);\n                        }}>\n                            <Field name='email'\n                                   component={TextInput}\n                                   placeholder='email'\n                                   validate={required}\n                                   subscription={{\n                                       value: true,\n                                       error: true,\n                                       touched: true\n                                   }}\n\n                            />\n                            <Field name='password'\n                                   type='password'\n                                   component={TextInput}\n                                   placeholder='password'\n                                   validate={composeValidators(maxLength(12), required)}\n                                   subscription={{\n                                       value: true,\n                                       error: true,\n                                       touched: true\n                                   }}\n                            />\n                            <div>\n                                <Field name='rememberMe'\n                                       type='checkbox'\n                                       component={TextInput}\n                                /> Remember me\n                            </div>\n                            <button type=\"submit\" disabled={isFetching}>submit</button>\n\n                            {isSummaryError && <div className={classes.formSummaryError}>{errorMessage}</div>}\n                            {captchaUrl &&\n                            <div>\n                                <img src={captchaUrl} alt=\"captcha\"/>\n                                <div>\n                                    <Field name='captcha'\n                                           type='text'\n                                           validate={required}\n                                           placeholder='captcha'\n                                           component={TextInput}\n                                           subscription={{\n                                               value: true,\n                                               error: true,\n                                               touched: true\n                                           }}\n                                    />\n                                </div>\n                            </div>}\n                        </form>\n                    )\n                }}\n            />\n        </div>\n    );\n});\n\n\n\n\n\n\n\n\n","import React, {ComponentType} from 'react';\nimport {Preloader} from \"../common/preloader/Preloader\";\n\n\nexport function withSuspense <T>(WrappedComponent: ComponentType<T>) {\n\n    return (props: T) => {\n        return (\n            <React.Suspense fallback={<Preloader/>}>\n                <WrappedComponent {...props}/>\n            </React.Suspense>\n        );\n    };\n}\n","import React, {useEffect} from 'react';\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport './App.css';\n\nimport Error404 from './components/Error404/Error404';\nimport {Navbar} from './components/Navbar/Navbar';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport {Provider, useDispatch, useSelector} from \"react-redux\";\nimport {StateType, store} from \"./redux/redux-store\";\nimport {Preloader} from \"./common/preloader/Preloader\";\nimport {initialize} from \"./redux/app-reducer\";\nimport {Login} from './components/Login/Login';\nimport {withSuspense} from \"./hocs/withSuspense\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\n\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedUsers = withSuspense(UsersContainer)\n\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    const isInitializedApp = useSelector<StateType, boolean>(state => state.app.isInitializedApp);\n\n    const caughtAllUncaughtErrors = (e: ErrorEvent) => {\n        const { message, filename, lineno, colno, error } = e;\n        console.log(e.error);\n        console.error(`${message}\\n В ${lineno}:${colno} на ${filename}`);\n    }\n\n    useEffect(() => {\n        dispatch(initialize());\n\n        window.addEventListener('error', caughtAllUncaughtErrors);\n\n        return () => {\n            window.removeEventListener('error', caughtAllUncaughtErrors);\n        }\n    }, [])\n\n    if (!isInitializedApp) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className='appWrapper'>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className='appWrapperContent'>\n                <Switch>\n                    <Route path={'/'} exact render={() => <Redirect to={'/profile'}/>}/>\n\n                    <Route path={'/profile/:userId?'} render={() => <SuspendedProfile/>}/>\n\n                    <Route path={'/dialogs'} render={() => <SuspendedDialogs/>}/>\n\n                    <Route path={'/users'} render={() => <SuspendedUsers/>}/>\n\n                    <Route path={'/login'} render={() => <Login/>}/>\n\n                    <Route path={'/404'} render={() => <Error404/>}/>\n\n                    <Route path={'*'} render={() => <Redirect to={'/404'}/>}/>\n\n                </Switch>\n            </div>\n        </div>\n    );\n}\n\n\nexport default () => {\n    return (\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store}>\n                    <App/>\n                </Provider>\n            </BrowserRouter>\n        </React.StrictMode>\n    )\n};\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}